<?phpApp::uses('AppController', 'Controller');/** * Cities Controller * * @property City $City * @property PaginatorComponent $Paginator * @property SessionComponent $Session */class FinancesController extends AppController {/** * Components * * @var array */	public $components = array('Paginator', 'Session','Mpdf');	var  $uses = array('Finance','Financial','CompanyDetail','ClientDetail','Period','ReportingPeriod','Ngo','Subcategory','OverheadDetail','Financestatus');/** * index method * * @return void */	public function index() {				$data='';$searchKey=null;$searchUserId=null;$searchBuilderId=null;$searchProjectId=null;$fromdate=null;$todate=null;		$condition='';$querySrting=''; $condition=array();		$conc='';				if(isset($this->params->query['confirm'])) {	   		if(isset($this->request->query['search_key']) and (trim($this->request->query['search_key'])!='')){ 			$searchKey=trim($this->request->query['search_key']);      $condition['OR']=array('Finance.id LIKE'=>'%'.$searchKey.'%','Finance.unit_cost LIKE'=>'%'.$searchKey.'%','Finance.no_of_unit LIKE'=>'%'.$searchKey.'%','Finance.frequecy LIKE'=>'%'.$searchKey.'%','Finance.amount LIKE'=>'%'.$searchKey.'%'); 		}				if(isset($this->request->query['from_date']) || isset($this->request->query['to_date'])){						if(($this->request->query['from_date']!='') and ($this->request->query['to_date']!=''))			{				$fromdate=trim(date('Y-m-d',strtotime($this->request->query['from_date'])));				$todate=trim(date('Y-m-d',strtotime($this->request->query['to_date'])));				$condition['AND']=array('date(Finance.billing_date) >='=>$fromdate,'date(Finance.billing_date) <='=>$todate);				}				if(($this->request->query['from_date']!='') and ($this->request->query['to_date']=='')){									$fromdate=trim(date('Y-m-d',strtotime($this->request->query['from_date'])));  				$condition['Finance.billing_date']=$fromdate;					}							}				if(isset($this->request->query['company_name']) and ($this->request->query['company_name']!=0) and ($this->request->query['company_name']!='')){$searchBuilderId=trim($this->request->query['company_name']); 		$condition['Finance.company_name']=$searchBuilderId;		}		//		if(isset($this->request->query['subcat_id']) and ($this->request->query['subcat_id']!=0) and ($this->request->query['subcat_id']!='')){$searchProjectId=trim($this->request->query['subcat_id']);//		$condition['Finance.subcat_id']=$searchProjectId;//		}////		//		if(isset($this->request->query['search_user']) and ($this->request->query['search_user']!=0) and ($this->request->query['search_user']!='')){$searchUserId=trim($this->request->query['search_user']);//		$condition['OR']=array('Ngo.booked_by'=>$searchUserId,'Ngo.booked_by_2'=>$searchUserId);//		}//			}		 $company=$this->CompanyDetail->find('list');	         $this->Paginator->settings = array('Finance' => array('limit' =>20,'group'=>array('slip','company'),'order' => array('id' => 'desc'),'conditions'=>array($condition,'Finance.status'=>'active')));		$this->Finance->recursive = 0;		$this->set('financials', $this->Paginator->paginate());		 //$subcat=$this->Subcategory->find('list',array('order'=>array('name'=>'asc')));		 $period=$this->Period->query("select * from periods");	                  $client=$this->ClientDetail->find('list');		$this->set(compact('users','blocks','panchayats','client','company','period'));					}                                public function report() {				$data='';$searchKey=null;$searchUserId=null;$searchBuilderId=null;$searchProjectId=null;$fromdate=null;$todate=null;		$condition='';$querySrting=''; $condition=array();		$conc='';				if(isset($this->request->query)) {                    $company=$this->request->query['com'];                    $client=$this->request->query['cl'];                    $slip=$this->request->query['slip'];	    //		if(isset($this->request->query['search_key']) and (trim($this->request->query['search_key'])!='')){ //			$searchKey=trim($this->request->query['search_key']);  //    $condition['OR']=array('Finance.id LIKE'=>'%'.$searchKey.'%','Finance.unit_cost LIKE'=>'%'.$searchKey.'%','Finance.no_of_unit LIKE'=>'%'.$searchKey.'%','Finance.frequecy LIKE'=>'%'.$searchKey.'%','Finance.amount LIKE'=>'%'.$searchKey.'%'); //	//	}//		//		if(isset($this->request->query['from_date']) || isset($this->request->query['to_date'])){//			//			if(($this->request->query['from_date']!='') and ($this->request->query['to_date']!=''))//			{//				$fromdate=trim($this->request->query['from_date']);//				$todate=trim($this->request->query['to_date']);//				$condition['AND']=array('date(Ngo.date_of_booking) >='=>$fromdate,'date(Ngo.date_of_booking) <='=>$todate);//				}//				if(($this->request->query['from_date']!='') and ($this->request->query['to_date']=='')){//					//				$fromdate=trim($this->request->query['from_date']);  //				$condition['Ngo.date_of_booking']=$fromdate;	//				}//				//			}//		//		if(isset($this->request->query['organization']) and ($this->request->query['organization']!=0) and ($this->request->query['organization']!='')){$searchBuilderId=trim($this->request->query['organization']); //		$condition['Finance.organization']=$searchBuilderId;//		}//                //                if(isset($this->request->query['organization']) and ($this->request->query['organization']!=0) and ($this->request->query['organization']!='')){$searchorgId=trim($this->request->query['organization']); //		$condition1['Financestatus.organization']=$searchorgId;//		}//		//		if(isset($this->request->query['period_id']) and ($this->request->query['period_id']!=0) and ($this->request->query['period_id']!='')){$searchPeriodId=trim($this->request->query['period_id']);//		$condition['Finance.period_id']=$searchPeriodId;//		}//                if(isset($this->request->query['period_id']) and ($this->request->query['period_id']!=0) and ($this->request->query['period_id']!='')){$searchPeriodsId=trim($this->request->query['period_id']);//		$condition1['Financestatus.period_id']=$searchPeriodsId;//		}////		//		if(isset($this->request->query['reporting_period']) and ($this->request->query['reporting_period']!=0) and ($this->request->query['reporting_period']!='')){$searchreporting=trim($this->request->query['reporting_period']);//		$condition['Finance.reporting_period']=$searchreporting;//		}//                if(isset($this->request->query['reporting_period']) and ($this->request->query['reporting_period']!=0) and ($this->request->query['reporting_period']!='')){$searchreportingId=trim($this->request->query['reporting_period']);//		$condition1['Financestatus.reporting_period']=$searchreportingId;//		}                                $invoicedetails=$this->Finance->find('all',array('conditions'=>array('Finance.company'=>$company,'Finance.company_name'=>$client,'Finance.slip'=>$slip)));               // print_r($invoicedetails);               //die();//	         $getAll=$this->Finance->find('first',array('order'=>array('Finance.cat_id'=>'asc'),'conditions'=>$condition));//	        $period=$this->Period->query("select * from periods where id=".$this->request->query['period_id']);//                //$reporting_periods=$this->ReportingPeriod->query("select * from reporting_periods where id=".$this->request->query['reporting_period']);//                $ngos=$this->Ngo->find('first',array('conditions'=>array('Ngo.id'=>$this->request->query['organization'])));//                $overs=$this->OverheadDetail->find('first',array('conditions'=>array('OverheadDetail.organization'=>$this->request->query['organization'])));//                $fundstaus=$this->Financestatus->find('first',array('order'=>array('Financestatus.id'=>'desc'),'conditions'=>$condition1));//	                        }         else {                                         $period=$this->Period->query("select * from periods");                $reporting_periods=$this->ReportingPeriod->query("select * from reporting_periods");                $ngos=$this->Ngo->find('list');                     }			        $this->Paginator->settings = array('Finance' => array('limit' =>20,'order' => array('id' => 'desc'),'conditions'=>array($condition,'Finance.status'=>'active')));		$this->Finance->recursive = 0;		$this->set('financials', $this->Paginator->paginate());				$this->set(compact('invoicedetails','users','blocks','panchayats','subcat','ngos','period','reporting_periods','category','overs','getAll'));			$this->layout='newdefault';		}/** * view method * * @throws NotFoundException * @param string $id * @return void */	public function view($id = null) {                        		if (!$this->Finance->exists($id)) {			throw new NotFoundException(__('Invalid financial details'));		}		$options = array('conditions' => array('Finance.' . $this->Finance->primaryKey => $id));		$this->set('financial', $this->Finance->find('first', $options));                $this->layout='newdefault';	}public function viewdetails($id = null) {                        		 $r = explode(',',$id);                 //print_r($r);                // die();		$options = array('conditions' => array('Finance.company'=> $r['0'],'Finance.company_name'=> $r['1'],'Finance.slip'=> $r['2']));		 $this->set('financials', $this->Finance->find('all', $options));                             $this->layout='newdefault';	}/** * add method * * @return void */	public function add() {		if ($this->request->is('post')) {			$this->Finance->create();                         //print_r($this->request->data);                      // die();                       $bill=  explode('/',$this->request->data['Finance']['invoice_number']);                   //  print_r($bill);                    // die();                           for($i=0;$i<count($this->request->data['Finance']['amount']);$i++){                                                        $company =  $this->request->data['Finance']['company'];                            $financial_year =  $this->request->data['Finance']['financial_year'];                            $bill_number =  $this->request->data['Finance']['invoice_number'];                            $company_name =  $this->request->data['Finance']['company_name'];                           // $description =  $this->request->data['Finance']['description'][$i];                            $description_details =  $this->request->data['Finance']['description_details'][$i];                            $amount =  $this->request->data['Finance']['amount'][$i];                            $advance_amount =  $this->request->data['Finance']['advance_amount'];                            $less_amount =  $this->request->data['Finance']['less_amount'];                            $current_total_amount =  $this->request->data['Finance']['current_total_amount'];                            $billing_date =  date('Y-m-d',strtotime($this->request->data['Finance']['invoice_date']));                            $slip= $bill['1'];                            $data = array(                            	'company'=>$company,                            	'financial_year'=>$financial_year,                                'invoice_number'=>$bill_number,                            	'amount'=>$amount,                            	'company_name'=>$company_name,                            	//'description'=>$description,                                'description_details'=>$description_details,                                'current_total_amount'=>$current_total_amount,                                'advance_amount'=>$advance_amount,                                'less_amount'=>$less_amount,                                'invoice_date'=>$billing_date,                                'slip'=>$slip                                                                                    );                          $save=$this->Finance->saveAll($data);				                                                    }			if ($save) {				$this->Session->setFlash(__('The Financial has been saved.'));				return $this->redirect(array('action' => 'index'));			} else {				$this->Session->setFlash(__('The Financial could not be saved. Please, try again.'));			}		}               		$period=$this->Period->query("select * from periods order by id desc");              //  $reporting_periods=$this->ReportingPeriod->query("select * from reporting_periods");                 $company=$this->CompanyDetail->find('list',array('conditions'=>array('CompanyDetail.status'=>'active')));                  $client=$this->ClientDetail->find('list',array('conditions'=>array('ClientDetail.status'=>'active')));                 //////foreach($period as $key=>$value) {                   // print_r($value);		//$periods = $value['periods']['from_date'].'  '.$value['periods']['to_date'];                //}		$this->set(compact('cat','period','ngo','subcat','reporting_periods','company','client'));			}                                public function fundstatus() {		if ($this->request->is('post')) {			$this->Financestatus->create();                                                                                                       $organization =  $this->request->data['Financestatus']['organization'];                            $period_id =  $this->request->data['Financestatus']['period_id'];                            $reporting_period =  $this->request->data['Financestatus']['reporting_period'];                            $opening_balance =  $this->request->data['Financestatus']['opening_balance'];                           // $grant_received_from_pfi =  $this->request->data['Financestatus']['grant_received_from_pfi'];                            //$interest_earned =  $this->request->data['Financestatus']['interest_earned'];                            $closing_fund_balance =  $this->request->data['Financestatus']['closing_fund_balance'];                                                                                  $data = array(                            	'organization'=>$organization,                            	'period_id'=>$period_id,                                'reporting_period'=>$reporting_period,                            	'opening_balance'=>$opening_balance,                            //	'grant_received_from_pfi'=>$grant_received_from_pfi,                            //	'interest_earned'=>$interest_earned,                                'closing_fund_balance'=>$closing_fund_balance,                                                                                    );                          $save=$this->Financestatus->saveAll($data);				                                                    			if ($save) {				$this->Session->setFlash(__('The Financial has been saved.'));				return $this->redirect(array('action' => 'index'));			} else {				$this->Session->setFlash(__('The Financial could not be saved. Please, try again.'));			}		}                $cat=$this->Financial->find('list',array('order'=>array('name'=>'asc')));                $subcat=$this->Subcategory->find('list',array('order'=>array('name'=>'asc')));                $ngo=$this->Ngo->find('list');		$period=$this->Period->query("select * from periods");                $reporting_periods=$this->ReportingPeriod->query("select * from reporting_periods");                ////foreach($period as $key=>$value) {                   // print_r($value);		//$periods = $value['periods']['from_date'].'  '.$value['periods']['to_date'];                //}		$this->set(compact('cat','period','ngo','subcat','reporting_periods'));			}/** * edit method * * @throws NotFoundException * @param string $id * @return void */	public function edit($id = null) {		if (!$this->Finance->exists($id)) {			throw new NotFoundException(__('Invalid Financial'));		}		if ($this->request->is(array('post', 'put'))) {                                                $description_details =  $this->request->data['Finance']['description_details'];                            $amount =  $this->request->data['Finance']['amount'];                                                    $data = array(                            	'description_details'=>$description_details,                            	'amount'=>$amount,                                'id'=>$id                                                    );                         $save=$this->Finance->saveAll($data);   			if ($save) {				$this->Session->setFlash(__('The Financial details has been saved.'));				return $this->redirect(array('action' => 'index'));			} else {				$this->Session->setFlash(__('The Financial details could not be saved. Please, try again.'));			}		} else {			$options = array('conditions' => array('Finance.' . $this->Finance->primaryKey => $id));			$this->request->data = $this->Finance->find('first', $options);		}				$period=$this->Period->query("select * from periods");               // $reporting_periods=$this->ReportingPeriod->query("select * from reporting_periods");                 $company=$this->CompanyDetail->find('list');                  $client=$this->ClientDetail->find('list');                 //////foreach($period as $key=>$value) {                   // print_r($value);		//$periods = $value['periods']['from_date'].'  '.$value['periods']['to_date'];                //}		$this->set(compact('cat','period','ngo','subcat','reporting_periods','company','client'));	}/** * delete method * * @throws NotFoundException * @param string $id * @return void */public function testpdf() {    // initializing mPDF  // App::import('Vendor', 'Mpdf/Mpdf');  //require_once SITE_PATH.'app/vendor/autoload.php';    $this->Mpdf->init();    // setting filename of output pdf file   $this->Mpdf->setFilename('file.pdf');    // setting output to I, D, F, S   $this->Mpdf->setOutput('D');    // you can call any mPDF method via component, for example:    $this->Mpdf->SetWatermarkText("Draft");}	                public function delete($id = null) {             		 $get=$this->Finance->find('first',array("conditions"=>array('Finance.slip'=>$id)));             //print_r($get['Finance']['status']); die();              if($get['Finance']['status']=='active'){                  $status='deactive';              }else { $status='active';}               // $this->Finance->read(null,$id);                            $total = $this->Finance->query("UPDATE finances SET status='$status' where slip=$id");		$this->Session->setFlash(__('The Finance has been '.$status));				return $this->redirect(array('action' => 'index'));                 	}public function generate_pdf(){         		$data='';$searchKey=null;$searchUserId=null;$searchBuilderId=null;$searchProjectId=null;$fromdate=null;$todate=null;		$condition='';$querySrting=''; $condition=array();		$conc='';				if(isset($this->request->query)) {                    $company=$this->request->query['com'];                    $client=$this->request->query['cl'];                    $slip=$this->request->query['slip'];	                    $invoicedetails=$this->Finance->find('all',array('conditions'=>array('Finance.company'=>$company,'Finance.company_name'=>$client,'Finance.slip'=>$slip)));                                     }         else {                                         $period=$this->Period->query("select * from periods");                $reporting_periods=$this->ReportingPeriod->query("select * from reporting_periods");                $ngos=$this->Ngo->find('list');                     }			        $this->Paginator->settings = array('Finance' => array('limit' =>20,'order' => array('id' => 'desc'),'conditions'=>array($condition,'Finance.status'=>'active')));                $this->Finance->recursive = 0;                $this->set('financials', $this->Paginator->paginate());                $this->set(compact('invoicedetails','users','blocks','panchayats','subcat','ngos','period','reporting_periods','category','overs','getAll'));		     $this->layout = '/pdf/default';     $this->render('/Pdf/pdfview'); }public function download_pdf() {     $this->viewClass = 'Media';     $params = array(         'id' => 'test.pdf',        'name' => 'your_test' ,        'download' => true,        'extension' => 'pdf',        'path' => APP . 'files/pdf' . DS    );     $this->set($params); }public function show_pdf() {     $this->viewClass = 'Media';     $params = array(         'id' => 'test.pdf',        'name' => 'your_test' ,        'download' => false,        'extension' => 'pdf',        'path' => APP . 'files/pdf' . DS    );     $this->set($params); }public function view_pdf($com){         		$data='';$searchKey=null;$searchUserId=null;$searchBuilderId=null;$searchProjectId=null;$fromdate=null;$todate=null;		$condition='';$querySrting=''; $condition=array();		$conc='';				if(isset($this->request->query)) {//                    $company=$this->request->query['com'];////                    $client=$this->request->query['cl'];////                    $slip=$this->request->query['slip'];                      $company=$com;                    $client=$cl;                     $slip=$slip;	                    $invoicedetails=$this->Finance->find('all',array('conditions'=>array('Finance.company'=>$company,'Finance.company_name'=>$client,'Finance.slip'=>$slip)));                                     }         else {                                         $period=$this->Period->query("select * from periods");                $reporting_periods=$this->ReportingPeriod->query("select * from reporting_periods");                $ngos=$this->Ngo->find('list');                     }			        $this->Paginator->settings = array('Finance' => array('limit' =>20,'order' => array('id' => 'desc'),'conditions'=>array($condition,'Finance.status'=>'active')));                $this->Finance->recursive = 0;                $this->set('financials', $this->Paginator->paginate());                $this->set(compact('invoicedetails','users','blocks','panchayats','subcat','ngos','period','reporting_periods','category','overs','getAll'));		     $this->layout = '/pdf/default';     $this->render('/Pdf/view_pdf'); }		public function getclosingbalance() {	    	       $this->layout='ajax';                $this->autoRender = false;                 $rid=$this->params->query['rid'];	         $gid=$this->params->query['gid'];                 $pid=$this->params->query['pid'];	   		//$subcatlist=$this->FinancialDetail->find('first',array("conditions"=>array('FinancialDetail.organization'=>$gid,'FinancialDetail.cat_id'=>$cat_id)));		$total = $this->Finance->query('select SUM(amount) as totalamount,SUM(current_expediture) as totalexp from finances where organization='.$gid.' and period_id='.$pid.' and reporting_period='.$rid);		//print_r($total);                //die();                return $total['0']['0']['totalamount']-$total['0']['0']['totalexp'];;                               // return $total['FinancialDetail']['ctotal'];	}                public function getopenigbalance() {	    	       $this->layout='ajax';                $this->autoRender = false;                 $rid=$this->params->query['rid'];	         $gid=$this->params->query['gid'];                 $pid=$this->params->query['pid'];	   		//$subcatlist=$this->FinancialDetail->find('first',array("conditions"=>array('FinancialDetail.organization'=>$gid,'FinancialDetail.cat_id'=>$cat_id)));		$total = $this->Financestatus->query('select opening_balance from financestatuses where organization='.$gid.' and period_id='.$pid.' and reporting_period='.$rid);		//print_r($total);                //die();                return $total['0']['financestatuses']['opening_balance'];                               // return $total['FinancialDetail']['ctotal'];	}                public function getblocks($stateid) {	    $this->layout='ajax';        $this->autoRender = false;	    $data='<option value="">Select Block</option>';		$subcatlist=$this->Financial->find('list',array("conditions"=>array('city_id'=>$stateid)));		foreach($subcatlist as $key=>$value){ $data.='<option value="'.$key.'">'.$value.'</option>';}		return $data;	}                      //// report export section start------------//////              public function export(){            $data='';$searchKey=null;$searchUserId=null;$searchCountryId=null;$searchBuilderId=null;$searchProjectId=null;		$searchStatus=null;$pages=null;$condition='';$querySrting=''; $condition=array();$condition2='';		$conc='';		//$username=$this->User->findById(CakeSession::read('User.id'));		if(isset($this->params->query['confirm'])) {	   		if(isset($this->request->query['search_key']) and (trim($this->request->query['search_key'])!='')){ 			$searchKey=trim($this->request->query['search_key']);      //$condition['OR']=array('Geographical.id LIKE'=>'%'.$searchKey.'%','Geographical.ward LIKE'=>'%'.$searchKey.'%','Geographical.awc_code LIKE'=>'%'.$searchKey.'%','Geographical.awc_worker LIKE '=>'%'.$searchKey.'%','Geographical.asha_name LIKE '=>'%'.$searchKey.'%'); 	$condition2.=' and Finance.id LIKE %'.$searchKey.'% || Finance.unit_cost LIKE %'.$searchKey.'% || Finance.no_of_unit LIKE %'.$searchKey.'% || Finance.frequecy LIKE %'.$searchKey.'% || Finance.amount LIKE %'.$searchKey.'%' ;		}			//	if(isset($this->request->query['from_date']) || isset($this->request->query['to_date'])){//			//			if(($this->request->query['from_date']!='') and ($this->request->query['to_date']!=''))//			{//				$fromdate=trim($this->request->query['from_date']);//				$todate=trim($this->request->query['to_date']);//				$condition2.=' and date(Enquiry.posted_date)>="'.$fromdate.'" and date(Enquiry.posted_date)<="'.$todate.'"';//				//$condition['AND']=array('date(Enquiry.posted_date) >='=>$fromdate,'date(Enquiry.posted_date) <='=>$todate);//				}//				else if(($this->request->query['from_date']!='') and ($this->request->query['to_date']=='')){//					//				$fromdate=trim($this->request->query['from_date']);  //				//$condition['Enquiry.posted_date']=$fromdate;	//				$condition2.=' and date(Enquiry.posted_date)="'.$fromdate.'"';//				}//				else//				{//					//					}//			}//						  		if(isset($this->request->query['organization']) and ($this->request->query['organization']!=0) and ($this->request->query['organization']!='')){$searchBuilderId=trim($this->request->query['organization']);  //$condition['Enquiry.country_id']=$searchCountryId;		$condition2.=' and Finance.organization='.$searchBuilderId;				}				if(isset($this->request->query['subcat_id']) and ($this->request->query['subcat_id']!=0) and ($this->request->query['subcat_id']!='')){$searchProjectId=trim($this->request->query['subcat_id']); //$condition['Enquiry.project_id']=$searchProjectId;		$condition2.=' and Finance.subcat_id='.$searchProjectId;		}               							}//		else {//		if(CakeSession::read('User.type')==='regular'){//			$condition2.=' and Enquiry.user_id='.CakeSession::read('User.id');//			//$condition2.=' and Enquiry.user_id='.CakeSession::read('User.id');//				//		}//		else {//		//		}//		}		//$condition['NOT']=array('Enquiry.status'=>"trash");		$condition2.=' and Finance.status="active"';		$this->response->download("Finance.csv");		//print_r($condition); exit;		$data=$this->Finance->query('select Finance.id,Finance.unit_cost,Finance.no_of_unit,Finance.frequecy,Finance.amount,Finance.grant_received_from_pfi,Finance.previous_expenditure,Finance.opening_balance,Finance.closing_fund_balance,Finance.reporting_period,Finance.current_expediture,Finance.cumulative_expenditure,Finance.variane,Finance.variance_percentage,Finance.reason_variance,Finance.next_quater_projection,Finance.interest_earned,Financialsubcategory.name,Ngo.name_of_ngo,Period.from_date,Period.to_date,Report.from_date,Report.to_date,Finance.status from finances as Finance left join reporting_periods as Report  on Finance.reporting_period=Report.id left join financial_subcategory as Financialsubcategory  on Finance.subcat_id=Financialsubcategory.id left join ngos as Ngo  on Finance.organization=Ngo.id left join periods as Period on Finance.period_id=Period.id where 1 '.$condition2 );						//$data = $this->Geographical->find('all', array('conditions'=>$condition2));				//$log = $this->Enquiry->getDataSource()->getLog(false, false);        //debug($log);		//exit;		            $headers = array('Finance'=>array( 'Id' => 'Id', 'Organization' => 'Organization', 'Activity' => 'Activity','Unit Cost'=>'Unit Cost','No of Unit'=>'No of Unit','Frequecy'=>'Frequecy','Amount'=>'Amount','Grant Period' => 'Grant Period','Reporting Period' => 'Reporting Period','Previous Expenditure'=>'Previous Expenditure','Current Expediture'=>'Current Expediture','Cumulative Expenditure'=>'Cumulative Expenditure','Variane'=>'Variane','Variance Percentage'=>'Variance Percentage','Reason for Variance'=>'Reason for Variance','Opening Balance'=>'Opening Balance','Projection For Next Quater'=>'Projection For Next Quater','Grant Received From PFI'=>'Grant Received From PFI','Interest Earned'=>'Interest Earned','Closing Fund Balance'=>'Closing Fund Balance','Status'=>'Status')); 	    $this->set(compact('data','headers'));		$this->layout = 'ajax';		return;				}  ////  reports section ---/////                                                                            public function getAll($stateid) {	    $this->layout='ajax';            $this->autoRender = false;           	     		$subcatlist=$this->Finance->find('all',array('conditions'=>array('Finance.cat_id'=>$stateid,'Finance.status'=>'active')));                                          return $subcatlist;                                   }                                                   public function getbillnumber() {	$this->layout='ajax';        $this->autoRender = false;        $c=$this->params->query['c'];	$y=$this->params->query['y'];        $options = array('order' => array('Finance.id' => 'desc'),'group'=>array('slip'),'conditions' => array('Finance.company'=> $c,'Finance.company_name'=> $y,'Finance.due_status'=>1,'Finance.status'=>'active'));        $com = $this->Finance->find('list',$options);            $data='<option value="">Select</option>';              foreach($com as $key=>$value){ $data.='<option value="'.$key.'">'.$value.'</option>';}		return $data;	}                   public function getamount() {	$this->layout='ajax';        $this->autoRender = false;        //$c=$this->params->query['c'];	$y=$this->params->query['y'];        $options = array('order' => array('Finance.id' => 'desc'),'group'=>array('slip'),'conditions' => array('Finance.id'=> $y,'Finance.due_status'=>1,'Finance.status'=>'active'));        $com = $this->Finance->find('first',$options);           $data = $com['Finance']['current_total_amount'];           // die();  		return $data;	} }